import java.util.ArrayList;

class piece{
  boolean isActive;
  int x;
  int y;


  static String checkMove(int moveX, int moveY, int side){
    //Check valid move code is at home
    return "a";

  }


  static ArrayList<String> getPossibleMoves(int x, int y, int play, board b){
    ArrayList<String> moveSet = new ArrayList();
    ArrayList<String> tempz = new ArrayList();


    tempz = getMoveSet(x,y,play,1,b);
    for(int i = 0; i < tempz.size(); i++){
      moveSet.add(tempz.get(i));
    }
    tempz = getMoveSet(x,y,play,-1,b);
    for(int i = 0; i < tempz.size(); i++){
      moveSet.add(tempz.get(i));
    }

    return moveSet;
  }

  static ArrayList<String> getMoveSet(int x, int y, int play, int sideCheck, board b){
    int x1 = x + sideCheck;
    int y1 = y + play;
    ArrayList<String> tempMoveSet = new ArrayList<>();
    ArrayList<String> moveSet = new ArrayList();
    String temp;

    if((x1 != -1 && y1 != -1) && x1 !=8 && y1 !=8) {

      if (b.getState(x1, y1) == 0) {
        temp = Integer.toString(x) + Integer.toString(y);
        temp = temp + Integer.toString(x1) + Integer.toString(y1);
        moveSet.add(temp);
        temp = "";
      } else if (b.getSide(x1, y1) == 2) {

      } else if (b.getSide(x1, y1) == 1) {

        if (b.getState(x1 + sideCheck, y1 + play) == 0) {
          //Sets the temp String to the move set to this current position, then adds this moveSet to the list of move sets
          temp = Integer.toString(x) + Integer.toString(y);
          temp = temp + Integer.toString(x1) + Integer.toString(y1);
          temp = temp + Integer.toString(x1 + sideCheck) + Integer.toString(y1 + play);
          moveSet.add(temp);
          //Re-calls this function at the position in which the piece would be moved
          tempMoveSet = getMoveSet(x1 + sideCheck, y1 + play, play, sideCheck, b);
          //Adds the movePath to this position to the possible movePaths generated by the recall
          for (int i = 0; i < tempMoveSet.size() - 1; i++) {
            moveSet.add(temp + tempMoveSet.get(i));
          }
          temp = "";
        }
        //Move is not possible
      }
      return moveSet;
    }


    return moveSet;





  }


  static ArrayList<String> getMoveSet(int x, int y, board b) throws IndexOutOfBoundsException{
    ArrayList<String> moveSet = new ArrayList<>();
    ArrayList<String> tempMoveSet = new ArrayList<>();
    String temp;
    int x1,y1,startSide;
    x1 = x-1;
    y1 = y-1;
    startSide = b.getSide(x,y);


      if (b.getState(x1, y1) == 0) {
        temp = Integer.toString(x) + Integer.toString(y);
        temp = temp + Integer.toString(x1) + Integer.toString(y1);
        moveSet.add(temp);
        temp = "";
      } else if (b.getState(x1, y1) == 1) {
        //Move is not possible
      } else if (b.getState(x1, y1) == 2) {

        if (b.getState(x1 - 1, y1 - 1) == 0) {
          //Sets the temp String to the move set to this current position, then adds this moveSet to the list of move sets
          temp = Integer.toString(x) + Integer.toString(y);
          temp = temp + Integer.toString(x1) + Integer.toString(y1);
          temp = temp + Integer.toString(x1 - 1) + Integer.toString(y1 - 1);
          moveSet.add(temp);
          //Re-calls this function at the position in which the piece would be moved
          tempMoveSet = getMoveSet(x1 - 1, y1 - 1, b);
          //Adds the movePath to this position to the possible movePaths generated by the recall
          for (int i = 0; i < tempMoveSet.size() - 1; i++) {
            moveSet.add(temp + tempMoveSet.get(i));
          }
          temp = "";
        }
        //Move is not possible
      }

    //Add same move set for going to the right
  return moveSet;
  }
/*
  boolean makeMove(int moveX, int moveY){
    
    if (checkMove(moveX, moveY)){
      x = moveX;
      y = moveY;
      return true;
    }else{
      return false;
    }
    
  }
*/

}